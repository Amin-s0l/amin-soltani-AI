# -*- coding: utf-8 -*-
"""project4-Q1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1TtQxj7y4qFa6NgnRPaDv1Bx8ctgLvy7u
"""

from google.colab import drive
drive.mount('/content/gdrive')

path = "/content/drive/MyDrive/AI/houses_1.csv"

from google.colab import drive
drive.mount('/content/drive')

import pandas as pd
df = pd.read_csv(path)
df

num_rows = df.shape[0]
num_cols = df.shape[1]

print("تعداد سطرها: ", num_rows)
print("تعداد ستون‌ها: ", num_cols)

corr_matrix = df.corr()
corr_matrix

import pandas as pd
import matplotlib.pyplot as plt

price_columns= df['price']
plt.hist(price_columns)

plt.xlabel("Price")
plt.ylabel("Frequency")

plt.show()

from datetime import datetime
df['date']= pd.to_datetime(df['date'], format='%Y%m%dT') 
df['month'] = df['date'].dt.month 
df['year'] = df['date'].dt.year
df=df.drop('date',axis=1)
df

max_value = df['price'].max() 
min_value = df['price'].min()  

print('Max price:', max_value)
print('Min price:', min_value)

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from keras.optimizers import SGD
from sklearn import preprocessing
import numpy as np
from sklearn.metrics import mean_squared_error


feature_df = df.drop('price', axis=1)
X = np.asarray(feature_df)
y = df['price'].values

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

Scaler= preprocessing.StandardScaler().fit(X_train)
X_train =Scaler.transform(X_train.astype(float))

#
#
#
model = Sequential()
model.add(Dense(42, input_dim=X_train.shape[1], activation='relu'))
model.add(Dense(21, activation='relu'))
model.add(Dense(1, activation='linear'))

sgd = SGD(learning_rate=0.1)
model.compile(loss='mae', optimizer=sgd)

history = model.fit(X_train, y_train, epochs=20, batch_size=64, validation_split= 0.1)

y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
print('mse score:', mse)

plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title('Training and Validation Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()
plt.show()



import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from keras.optimizers import SGD
from sklearn import preprocessing
import numpy as np
from sklearn.metrics import mean_squared_error


feature_df = df.drop('price', axis=1)
X = np.asarray(feature_df)
y = df['price'].values

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

Scaler= preprocessing.StandardScaler().fit(X_train)
X_train =Scaler.transform(X_train.astype(float))




model = Sequential()
model.add(Dense(42, input_dim=X_train.shape[1], activation='relu'))
model.add(Dense(21, activation='relu'))
model.add(Dense(1, activation='linear'))

sgd = SGD(learning_rate=0.1)
model.compile(loss='mae', optimizer=sgd)

history = model.fit(X_train, y_train, epochs=4000, batch_size=64, validation_split= 0.1)

y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
print('mse score:', mse)

plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title('Training and Validation Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from keras.optimizers import SGD
from sklearn import preprocessing
import numpy as np
from sklearn.metrics import mean_squared_error


feature_df = df.drop('price', axis=1)
X = np.asarray(feature_df)
y = df['price'].values

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

Scaler= preprocessing.StandardScaler().fit(X_train)
X_train =Scaler.transform(X_train.astype(float))




model = Sequential()
model.add(Dense(42, input_dim=X_train.shape[1], activation='relu'))
model.add(Dense(21, activation='relu'))
model.add(Dense(1, activation='linear'))

sgd = SGD(learning_rate=0.001)
model.compile(loss='mae', optimizer=sgd)

history = model.fit(X_train, y_train, epochs=20, batch_size=64, validation_split= 0.1)

y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
print('mse score:', mse)

plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title('Training and Validation Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from keras.optimizers import SGD
from sklearn import preprocessing
import numpy as np
from sklearn.metrics import mean_squared_error


feature_df = df.drop('price', axis=1)
X = np.asarray(feature_df)
y = df['price'].values

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

Scaler= preprocessing.StandardScaler().fit(X_train)
X_train =Scaler.transform(X_train.astype(float))




model = Sequential()
model.add(Dense(42, input_dim=X_train.shape[1], activation='relu'))
model.add(Dense(21, activation='relu'))
model.add(Dense(1, activation='linear'))

sgd = SGD(learning_rate=0.001)
model.compile(loss='mae', optimizer=sgd)

history = model.fit(X_train, y_train, epochs=4000, batch_size=64, validation_split= 0.1)

y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
print('mse score:', mse)

plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title('Training and Validation Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from keras.optimizers import SGD
from sklearn import preprocessing
import numpy as np
from sklearn.metrics import mean_squared_error


feature_df = df.drop('price', axis=1)
X = np.asarray(feature_df)
y = df['price'].values

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

Scaler= preprocessing.StandardScaler().fit(X_train)
X_train =Scaler.transform(X_train.astype(float))


model = Sequential()
model.add(Dense(42, input_dim=X_train.shape[1], activation='tanh'))
model.add(Dense(21, activation='tanh'))
model.add(Dense(1, activation='linear'))

sgd = SGD(learning_rate=0.1)
model.compile(loss='mae', optimizer=sgd)

history = model.fit(X_train, y_train, epochs=20, batch_size=64, validation_split= 0.1)

y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
print('mse score:', mse)

plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title('Training and Validation Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from keras.optimizers import SGD
from sklearn import preprocessing
import numpy as np
from sklearn.metrics import mean_squared_error


feature_df = df.drop('price', axis=1)
X = np.asarray(feature_df)
y = df['price'].values


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

Scaler= preprocessing.StandardScaler().fit(X_train)
X_train =Scaler.transform(X_train.astype(float))



model = Sequential()
model.add(Dense(42, input_dim=X_train.shape[1], activation='relu'))
model.add(Dense(21, activation='relu'))
model.add(Dense(1, activation='linear'))

sgd = SGD(learning_rate=0.1)
model.compile(loss='mae', optimizer=sgd)


history = model.fit(X_train, y_train, epochs=20, batch_size=256, validation_split= 0.1)

y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
print('mse score:', mse)

plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title('Training and Validation Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from keras.optimizers import SGD
from sklearn import preprocessing
import numpy as np
from sklearn.metrics import mean_squared_error


feature_df = df.drop('price', axis=1)
X = np.asarray(feature_df)
y = df['price'].values


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

Scaler= preprocessing.StandardScaler().fit(X_train)
X_train =Scaler.transform(X_train.astype(float))





model = Sequential()
model.add(Dense(42, input_dim=X_train.shape[1], activation='relu'))
model.add(Dense(21, activation='relu'))
model.add(Dense(1, activation='linear'))

sgd = SGD(learning_rate=0.1)
model.compile(loss='mae', optimizer=sgd)

history = model.fit(X_train, y_train, epochs=20, batch_size=1, validation_split= 0.1)

y_pred = model.predict(X_test)
mse = mean_squared_error(y_test, y_pred)
print('mse score:', mse)

plt.plot(history.history['loss'], label='Training Loss')
plt.plot(history.history['val_loss'], label='Validation Loss')
plt.title('Training and Validation Loss')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()
plt.show()

import pandas as pd
import matplotlib.pyplot as plt
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
import tensorflow as tf
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense
from keras.optimizers import SGD
from sklearn import preprocessing
import numpy as np
from sklearn.metrics import mean_squared_error


feature_df = df.drop('price', axis=1)
X = np.asarray(feature_df)
y = df['price'].values

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2)

Scaler= preprocessing.StandardScaler().fit(X_train)
X_train =Scaler.transform(X_train.astype(float))




model = Sequential()
model.add(Dense(42, input_dim=X_train.shape[1], activation='relu'))
model.add(Dense(21, activation='relu'))
model.add(Dense(1, activation='linear'))

sgd = SGD(learning_rate=0.001)
model.compile(loss='mae', optimizer=sgd)

history = model.fit(X_train, y_train, epochs=20, batch_size=64, validation_split= 0.1)

y_pred = model.predict(X_test)
from sklearn.metrics import confusion_matrix

cm = confusion_matrix(y_test, y_pred)
accuracy = np.trace(cm) / np.sum(cm)

print('Confusion Matrix:\n', cm)
print("accuracy", accuracy)

